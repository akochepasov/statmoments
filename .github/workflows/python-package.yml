name: Building Python Package

on: [push]

jobs:
  build-test-multiplatform:
    name: ${{ matrix.os.name }} ${{ matrix.python-version }}
    runs-on: ${{ matrix.os.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.6, 3.12 ]
        os:
            - name: Linux
              runs-on: ubuntu-20.04
              python_platform: linux
            - name: macOS
              runs-on: macOS-13
              python_platform: darwin
            - name: Windows
              runs-on: windows-2019
              python_platform: x64

    steps:
    - run: echo "The job triggered by ${{ github.event_name }} on ${{ runner.os }}"
    - run: echo "The branch name ${{ github.ref }}"

    - name: Checkout project
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install python dependencies
      run: |
        # Build dependencies
        pip install flake8 pytest pytest-cov pytest-xdist coverage cython Cython setuptools wheel
        # Main dependencies
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 --count --select=E9,F63,F7,F82 --show-source --statistics .
        # exit-zero treats all errors as warnings. Line is 120 chars wide
        flake8 --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics .

    - name: Build the package
      run: |
        pip install -e .

    - name: Run tests and generate coverage report
      run: |
        pip install -e .
        pytest --durations=0 -n auto --dist loadfile --cov statmoments .
        coverage report -m

    - name: Generate and upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        fail_ci_if_error: true  # CI fails if Codecov upload fails
